{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["SVGPure","react_default","a","createElement","className","width","height","cx","cy","r","fill","SVGPureClick","_useState","useState","_useState2","Object","slicedToArray","fillChg","onClick","useCallback","prev","SVGD3","svgRef","useRef","useEffect","d3","current","append","attr","ref","SVGD3Click","datum","on","this","d","SVGD3ClickTransition","transition","duration","Circl","props","x","y","_useState3","_useState4","circleRef","SVGD3ClickTransitionReact","App_Circl","Circl2","_useState5","_useState6","_useState7","_useState8","fillAttr","fillAttrChg","SVGD3ClickTransitionReact2","App_Circl2","App","App_SVGPure","App_SVGPureClick","App_SVGD3","App_SVGD3Click","App_SVGD3ClickTransition","App_SVGD3ClickTransitionReact","App_SVGD3ClickTransitionReact2","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.437cfd6d.chunk.js","sourcesContent":["import React, {\n  Component,\n  useRef,\n  useState,\n  useCallback,\n  useEffect\n} from \"react\";\nimport \"./App.css\";\nimport * as d3 from \"d3\";\n\nconst SVGPure = () => {\n  return (\n    <svg className=\"svg-root\" width=\"200\" height=\"100\">\n      <circle cx=\"100\" cy=\"50\" r=\"10\" fill=\"red\" />\n    </svg>\n  );\n};\n\nconst SVGPureClick = () => {\n  const [fill, fillChg] = useState(true);\n  const onClick = useCallback(() => {\n    fillChg(prev => !prev);\n  }, []);\n  return (\n    <svg className=\"svg-root\" width=\"200\" height=\"100\">\n      <circle\n        cx=\"100\"\n        cy=\"50\"\n        r=\"10\"\n        fill={fill ? \"red\" : \"blue\"}\n        onClick={onClick}\n      />\n    </svg>\n  );\n};\n\nconst SVGD3 = () => {\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg\n      .append(\"circle\")\n      .attr(\"cx\", 100)\n      .attr(\"cy\", 50)\n      .attr(\"r\", 10)\n      .attr(\"fill\", \"red\");\n  }, []);\n  return <svg ref={svgRef} className=\"svg-root\" width=\"200\" height=\"100\" />;\n};\nconst SVGD3Click = () => {\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg\n      .append(\"circle\")\n      .datum({ fill: true })\n      .attr(\"cx\", 100)\n      .attr(\"cy\", 50)\n      .attr(\"r\", 10)\n      .attr(\"fill\", \"red\")\n      .on(\"click\", function(this) {\n        d3.select<SVGCircleElement, { fill: boolean }>(this).attr(\"fill\", d => {\n          d.fill = !d.fill;\n          return d.fill ? \"blue\" : \"red\";\n        });\n      });\n  }, []);\n  return <svg ref={svgRef} className=\"svg-root\" width=\"200\" height=\"100\" />;\n};\n\nconst SVGD3ClickTransition = () => {\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg\n      .append(\"circle\")\n      .datum({ fill: true })\n      .attr(\"cx\", 100)\n      .attr(\"cy\", 50)\n      .attr(\"r\", 10)\n      .attr(\"fill\", \"red\")\n      .on(\"click\", function(this) {\n        d3.select<SVGCircleElement, { fill: boolean }>(this)\n          .transition()\n          .duration(1000)\n          .attr(\"fill\", d => {\n            d.fill = !d.fill;\n            return d.fill ? \"blue\" : \"red\";\n          });\n      });\n  }, []);\n  return <svg ref={svgRef} className=\"svg-root\" width=\"200\" height=\"100\" />;\n};\n\nconst Circl = (props: { x: number; y: number; r: number }) => {\n  const { x, y, r } = props;\n  const [fill, fillChg] = useState(true);\n  const onClick = useCallback(() => {\n    fillChg(prev => !prev);\n  }, []);\n  const circleRef = useRef(null);\n\n  useEffect(() => {\n    const circle = d3.select(circleRef.current);\n    circle\n      .transition()\n      .duration(1000)\n      .attr(\"fill\", fill ? \"red\" : \"blue\");\n  }, [fill]);\n\n  return (\n    <circle ref={circleRef} cx={x} cy={y} r={r} onClick={onClick} fill=\"red\" />\n  );\n};\n\nconst SVGD3ClickTransitionReact = () => {\n  return (\n    <svg className=\"svg-root\" width=\"200\" height=\"100\">\n      <Circl x={50} y={50} r={10} />\n      <Circl x={100} y={50} r={10} />\n      <Circl x={150} y={50} r={10} />\n    </svg>\n  );\n};\n\nconst Circl2 = (props: { x: number; y: number; r: number }) => {\n  const { x, y, r } = props;\n  const [fill, fillChg] = useState(true);\n  const [fillAttr, fillAttrChg] = useState(\"red\");\n  const onClick = useCallback(() => {\n    fillChg(prev => !prev);\n  }, []);\n  const circleRef = useRef(null);\n\n  useEffect(() => {\n    const circle = d3.select(circleRef.current);\n    circle\n      .transition()\n      .duration(1000)\n      .attr(\"fill\", fill ? \"red\" : \"blue\")\n      .on(\"end\", () => {\n        fillAttrChg(fill ? \"red\" : \"blue\");\n      });\n  }, [fill]);\n\n  return (\n    <circle\n      ref={circleRef}\n      cx={x}\n      cy={y}\n      r={r}\n      onClick={onClick}\n      fill={fillAttr}\n    />\n  );\n};\n\nconst SVGD3ClickTransitionReact2 = () => {\n  return (\n    <svg className=\"svg-root\" width=\"200\" height=\"100\">\n      <Circl2 x={50} y={50} r={10} />\n      <Circl2 x={100} y={50} r={10} />\n      <Circl2 x={150} y={50} r={10} />\n    </svg>\n  );\n};\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>D3なし</h1>\n        <SVGPure />\n        <h1>D3なし+クリック</h1>\n        <SVGPureClick />\n        <h1>D3</h1>\n        <SVGD3 />\n        <h1>D3+クリック</h1>\n        <SVGD3Click />\n        <h1>D3+クリック+トランジション</h1>\n        <SVGD3ClickTransition />\n        <h1>React+トランジション(D3)</h1>\n        <SVGD3ClickTransitionReact />\n        <h1>React+トランジション(D3)+完了イベント追加</h1>\n        <SVGD3ClickTransitionReact2 />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}